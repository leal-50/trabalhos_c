#include <stdio.h>

int main() {

    int tabuleiro[10][10] = {0}; // Inicializa o tabuleiro com 0 (água)
    int i, j;


    // Posiciona os navios horizontalmente
    for (i = 0; i < 1; i++) {
        for (j = 0; j < 3; j++) {
            tabuleiro[i][j] = 3; // Representa o navio com 3
        }
    }

    // Posiciona os navios verticalmente
    for (i = 3; i < 6; i++) {
        for (j = 4; j < 5; j++) {
            tabuleiro[i][j] = 3; // Representa o navio com 3
        }
    }

    // Posiciona os navios diagonalmente (um navio na diagonal principal)
    for (i = 6; i < 9; i++) {
        tabuleiro[i][i] = 3; // Representa o navio com 3
    }

    // Posiciona os navios diagonalmente (um navio na diagonal secundária)
    for (i = 0; i < 3; i++) {
        tabuleiro[i][9 - i] = 3; // Representa o navio com 3
    }

    // Define a matriz de habilidade em cone
    int cone[3][5] = {
        {0, 0, 1, 0, 0},
        {0, 1, 1, 1, 0},
        {1, 1, 1, 1, 1}
    };
    int cone_x = 1; // Ponto de origem no tabuleiro
    int cone_y = 2; // Ponto de origem no tabuleiro
    
    // Sobrepõe a matriz de habilidade em cone ao tabuleiro
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 5; j++) {
            if (cone[i][j] == 1) {
                int x = cone_x + i - 1; // Ajusta a posição no tabuleiro
                int y = cone_y + j - 1; // Ajusta a posição no tabuleiro
                if (x >= 0 && x < 10 && y >= 0 && y < 10) {
                    tabuleiro[x][y] = 5; // Marca a área afetada pela habilidade
                }
            }
        }
    }
    
    // Define a matriz de habilidade em cruz
    int cruz[5][5] = {
        {0, 0, 1, 0, 0},
        {0, 0, 1, 0, 0},
        {1, 1, 1, 1, 1},
        {0, 0, 1, 0, 0},
        {0, 0, 1, 0, 0}
    };
    int cruz_x = 4; // Ponto de origem no tabuleiro
    int cruz_y = 2; // Ponto de origem no tabuleiro
    
    // Sobrepõe a matriz de habilidade em cruz ao tabuleiro
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (cruz[i][j] == 1) {
                int x = cruz_x + i - 2; // Ajusta a posição no tabuleiro
                int y = cruz_y + j + 3; // Ajusta a posição no tabuleiro
                if (x >= 0 && x < 10 && y >= 0 && y < 10) {
                    tabuleiro[x][y] = 5; // Marca a área afetada pela habilidade
                }
            }
        }
    }
    
    // Define a matriz de habilidade em octaedro
    int octaedro[5][5] = {
        {0, 0, 1, 0, 0},
        {0, 1, 1, 1, 0},
        {1, 1, 1, 1, 1},
        {0, 1, 1, 1, 0},
        {0, 0, 1, 0, 0}
    };
    int octaedro_x = 7; // Ponto de origem no tabuleiro
    int octaedro_y = 2; // Ponto de origem no tabuleiro
    
    // Sobrepõe a matriz de habilidade em octaedro ao tabuleiro
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (octaedro[i][j] == 1) {
                int x = octaedro_x + i - 2; // Ajusta a posição no tabuleiro
                int y = octaedro_y + j - 2; // Ajusta a posição no tabuleiro
                if (x >= 0 && x < 10 && y >= 0 && y < 10) {
                    tabuleiro[x][y] = 8; // Marca a área afetada pela habilidade
                }
            }
        }
    }

    // Exibe o tabuleiro
    printf("TABULEIRO BATALHA NAVAL\n");
    printf("\n");

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            printf(" %d ", tabuleiro[i][j]);
        }
        printf("\n");
    }

    return 0;
}
